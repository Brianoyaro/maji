from PIL import Image
import secrets
from flask_mail import Message
import os
import requests
from werkzeug.utils import secure_filename
from app import app, db, mail
from flask import render_template, flash, redirect, url_for, request
from app.forms import (LoginForm, RegistrationForm, EditProfileForm, 
                       PlaceOrderForm, FilterSellersForm, CheckOrderForm, DeleteOrdersForm, MessageForm, ResetRequestForm, ActualRequestForm)
from flask_login import current_user, login_user, logout_user, login_required
from app.models import Users, Order, Message


@app.route('/')
@app.route('/index')
def index():
    """entry page of wesite"""
    return render_template('index.html') # customize index to handle nuyers and sellers by making it uniues to each I suppose by current_user.type == 1 then buyers else seller


@app.route('/home')
@login_required
def home():
    """redirects a user to thier specific home page e.g buyer to /buyer and seller to /seller"""
    if current_user.is_authenticated:
        """orders = Order.query.filter_by(purchaser=current_user).all()
        key = '994ee93c240c488cafd112500240103'
        location = current_user.county
        url = "http://api.weatherapi.com/v1/current.json?key={}&q={}&aqi=no".format(key, location)
        resp = requests.get(url).json()
        user = Users.query.filter_by(email=current_user.email).first()"""
        if current_user.type == 'buyer':
            # return render_template('buyers.html', title='Home Page', user=user, resp=resp, orders=orders)
            return redirect(url_for('buyer'))
        elif current_user.type == 'seller':
            return redirect(url_for('seller'))
            # return render_template('sellers.html', title='Home Page', user=user, resp=resp)
        else:
            return redirect(url_for('admin'))


@app.route('/buyer', methods=['GET', 'POST'])
@login_required
def buyer():
    """buyer section in website"""
    if current_user.is_authenticated:
        orders = Order.query.filter_by(purchaser=current_user).order_by(Order.id.desc()).limit(5).all()
        key = '994ee93c240c488cafd112500240103'
        location = current_user.county
        url = 'http://api.weatherapi.com/v1/current.json?key={}&q={}&aqi=no'.format(key, location)
        resp = requests.get(url).json()
        user = Users.query.filter_by(email=current_user.email).first()
    form = FilterSellersForm()
    if form.validate_on_submit():
        return redirect(url_for('place_order', county=form.county.data))
    return render_template('buyers.html', title='Home Page', user=user, resp=resp, orders=orders, form=form)


@app.route('/seller', methods=['GET', 'POST'])
@login_required
def seller():
    """seller/vender section in website"""
    if current_user.is_authenticated:
        orders = Order.query.filter_by(seller=current_user).filter_by(checked=False).all()
        key = '994ee93c240c488cafd112500240103'
        location = current_user.county
        url = "http://api.weatherapi.com/v1/current.json?key={}&q={}&aqi=no".format(key, location)
        resp = requests.get(url).json()
        user = Users.query.filter_by(email=current_user.email).first()
    form = CheckOrderForm()
    if form.validate_on_submit():
        order = Order.query.filter_by(id=form.id.data).first()
        order.checked = True
        db.session.add(order)
        db.session.commit()
        flash("You have marked the order as completed")
    return render_template('sellers.html', title='Home Page', user=user, resp=resp, orders=orders, form=form)


@app.route('/order_history')
@login_required
def order_history():
    """if a seller/vendor wants to see all of their order in detail"""
    orders = Order.query.filter_by(seller=current_user).all()
    return render_template('order_history.html', orders=orders)


@app.route('/login', methods=['GET', 'POST'])
def login():
    """login a user in the website"""
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    if form.validate_on_submit():
        user = Users.query.filter_by(email=form.email.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user, remember=form.remember_me.data)
        flash('Successfully logged in')
        if user.email == 'admin@admin.com':
            return redirect(url_for("admin"))

        """incase app redirected to /login because of @login_required"""
        next_page = request.args.get('next')
        if not next_page:
            next_page = url_for('home')
        return redirect(next_page) 
    return render_template("login.html", title="Login", form=form)


@app.route('/logout')
@login_required
def logout():
    """logout of application"""
    logout_user()
    flash('Successfully logged out')
    return redirect(url_for('index'))


@app.route('/register', methods=['GET', 'POST'])
def register():
    """Registering new users"""
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = Users(username=form.username.data, email=form.email.data, county=form.county.data, type=form.type.data, phone_number=form.phone_number.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash("Registeration completed")
        return redirect(url_for('login'))
    return render_template('registration.html', form=form, title='Registration Page')


@app.route('/user/profile', methods=['GET', 'POST'])
@login_required
def profile():
    """if user wants to see their profile section"""
    if current_user.is_authenticated:
        image = url_for("static", filename='pictures/' + current_user.profile_pic)
        user = Users.query.filter_by(email=current_user.email).first()
        return render_template('profile.html',user=user, title='Profile Page', image=image)


def save_image(pic_data):
    _, fn_ext = os.path.splitext(pic_data.filename)
    random_hex = secrets.token_hex(8)
    filename = random_hex + fn_ext
    picture_path = os.path.join(app.root_path, "static/pictures", filename)
    image_size = (125, 125)
    i = Image.open(pic_data)
    i.thumbnail(image_size)
    i.save(picture_path)
    # the commented line below saves picture-as-is while 4 lines above create a thumbnail 125 by 125 pixels size
    """pic_data.save(picture_path)"""
    return filename


@app.route('/edit/profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    """incase a user wants to modify their details in their profile"""
    form = EditProfileForm()
    if form.validate_on_submit():
        if form.profile_pic.data:
            img_name = save_image(form.profile_pic.data)
            current_user.profile_pic = img_name
        current_user.county = form.county.data
        current_user.username = form.username.data
        current_user.phone_number =form.phone_number.data
        db.session.commit()
        flash("Successfully updated profile")
        return redirect(url_for('edit_profile'))
    elif request.method == 'GET':
        form.county.data = current_user.county
        form.username.data = current_user.username
        form.phone_number.data = current_user.phone_number
    return render_template('edit_profile.html', title='Profile Edit', form=form)


@app.route('/order/<county>', methods=['GET', 'POST'])
@login_required
def place_order(county):
    """if user wants to place an order, has functionality to filter users given a county"""
    if county == 'all':
        sellers = Users.query.filter_by(type="seller").all()
    else:
        sellers = Users.query.filter_by(type="seller").filter_by(county=county).all()
    """if len(sellers) == 0:
        sellers = Users.query.filter_by(type=2).all()"""
    form = PlaceOrderForm()
    if form.validate_on_submit():
        purchaser = current_user
        seller = Users.query.filter_by(id=int(form.id.data)).filter_by(type="seller").first_or_404()
        order = Order(purchaser=purchaser, seller=seller)
        db.session.add(order)
        db.session.commit()
        flash("Order placed successfully")
        return redirect(url_for("home"))
    return render_template('place_order.html', form=form, sellers=sellers)


@app.route('/delete_me')
@login_required
def delete_me():
    """incase a user wants to delete their account in profile page section"""
    """
    if current_user.is_authenticated:
        users = Users.query.all()
        for user in users:
            if user == current_user:
                db.session.delete(user)
                db.session.commit()
                flash("Account Deleted Successfully")
                return redirect(url_for("index"))"""
    if current_user.email != 'admin@admin.com':
        db.session.delete(current_user)
        db.session.commit()
        flash("Account successfully deleted")
        return redirect(url_for("index"))
    flash('Admin not deletable')
    return redirect(url_for('profile'))


@app.route('/me/orders')
@login_required
def my_orders():
    """incase purchaser wants to see a detailed view of all of their placed orders and their statuses"""
    orders = Order.query.filter_by(purchaser=current_user).all()
    return render_template('my_orders.html', orders=orders)


@app.route('/admin')
@login_required
def admin():
    """handles admin view of web site"""
    if current_user.email == 'admin@admin.com':
        orders = Order.query.all()
        users = Users.query.all()
        # users.pop(0)
        return render_template('admin.html', orders=orders, users=users)


@app.route('/admin/orders/<id>', methods=["GET", "POST"])
@login_required
def delete_orders(id):
    """delete an order given ID or all orders"""
    if current_user.email == 'admin@admin.com':
        form = DeleteOrdersForm()
        orders = Order.query.all()
        if form.validate_on_submit():
            for order in orders:
                if order.id == int(form.id.data):
                    db.session.delete(order)
                    db.session.commit()
                    flash("Order deleted")
            return redirect(url_for('admin'))
        if id == 'all':
            for order in orders:
                db.session.delete(order)
            db.session.commit()
            flash("All orders successfully deleted")
            return redirect(url_for("admin"))
        return render_template('delete_orders.html', form=form, orders=orders)
    return redirect('home')

@app.route('/admin/users/<id>', methods=['GET', 'POST'])
@login_required
def delete_users(id):
    """delete a user given ID or all users except admin user"""
    if current_user.email == 'admin@admin.com':
        form = DeleteOrdersForm()
        users = Users.query.all()
        if form.validate_on_submit():
            for user in users:
                if user.id == int(form.id.data) and user != current_user:
                    db.session.delete(user)
                    db.session.commit()
                    flash("User deleted")
                if user.id == int(form.id.data) and user == current_user:
                    flash("Admin not deletable")
            return redirect(url_for('admin'))
        if id == 'all':
            users.pop(0)
            for user in users:
                db.session.delete(user)
            db.session.commit()
            flash("All users successfully deleted")
            return redirect(url_for("admin"))
        return render_template('delete_users.html', form=form, users=users)
    return redirect(url_for('home'))


@app.route('/inbox', methods=["GET", "POST"])
@login_required
def inbox():
    form = MessageForm()
    if form.validate_on_submit():
        receiver = Users.query.filter_by(email=form.to.data).first_or_404()
        message = Message(content=form.content.data, sender=current_user, receiver=receiver)
        db.session.add(message)
        db.session.commit()
        flash("message sent")
        return redirect("inbox")
    """messages = Message.query.filter_by(receiver=current_user).all()"""
    page = request.args.get("page", 1, type=int)
    messages = Message.query.filter_by(receiver=current_user).order_by(Message.id.desc()).paginate(page=page,per_page= 5, error_out=False)
    next_url = url_for("inbox", page=messages.next_num) if messages.has_next else None
    prev_url = url_for("inbox", page=messages.prev_num) if messages.has_prev else None
    return render_template('inbox.html', messages=messages, title="MyInbox", form=form, next_url=next_url, prev_url=prev_url)


@app.route('/delete/message/<id>')
@login_required
def delete_message(id):
    messages = Message.query.filter_by(receiver=current_user).all()
    if id == "all":
        for message in messages:
            db.session.delete(message)
        db.session.commit()
        flash("You inbox has been deleted successfully")
        return redirect(url_for('inbox'))


@app.route('/reset_request', methods=["GET", "POST"])
def reset_request():
    if current_user.is_authenticated:
        return redirect(url_for("home"))
    form = ResetRequestForm()
    if form.validate_on_submit():
        user = Users.query.filter_by(email=form.email.data).first()
        if user:
            reset_email(user)
        flash("Check you email for instructions")
        return redirect(url_for("login"))
    return render_template("reset_request.html", title="Password Reset", form=form)


def reset_email(user):
    token = user.get_token()
    send_mail('Password Reset',
              sender='brianoyaro2000@gmail.com',
              recipients=['brianoyaro2000@gmail.com'],
              text_body=render_template('email/msg.txt', user=user, token=token),
              html_body=render_template('email/msg.html', user=user, token=token))

def send_mail(subject, sender, recipients, text_body, html_body):
    # msg = Message(subject, sender=sender, recipients=recipients)
    """msg = Message(sender=sender, recipients=[recipients])
    msg.body = text_body
    msg.html = html_body
    mail.send(msg)"""
    msg = Message("Hello",
                  sender="from@example.com",
                  recipients=["to@example.com"])
    """msg = Message('Password Reset', sender=app.config['MAIL_USERNAME'], recipients=[user.email])
    msg.body = render_template("email/msg.txt", user=user, token=token)
    msg.html = render_template("email/msg.html", user=user, token=token)
    mail.send(msg)"""

@app.route('/password_reset/<token>', methods=["GET", "POST"])
def actual_password_reset(token):
    user = Users.check_token(token)
    if user is None:
        flash("Invalid/expired token")
        return redirect(orl_for("login"))
    form = ActualRequestForm()
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash("Password updated")
        return redirect(url_for("login"))
    return render_template("actual_password_reset.html", form=form, title="Password Reset")
